<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 配置spring的Ioc，把Service对象配置进来 -->
    <bean id="accountService" class="com.ce.service.impl.AccountServiceImpl"/>

    <!--spring中基于xml的AOP配置步骤
        1.把通知Bean也交给spring来管理
        2.使用aop:config标签表明开始AOP的配置
        3.使用aop:aspect标签表明配置切面
            id：给切面提供一个唯一标识
            ref属性：指定通知类bean的id
        4.在aop:aspect标签内部使用对应的标签来配置通知的类型
            我们现在配置的是让printLog方法在切入点方法之前执行，所以为前置通知
            aop:before  表示前置通知
                method属性：用于指定Logger类中哪个方法是前置通知
                pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
          切入点表达式的写法：
            关键字：execution(表达式)
            表达式：
                访问修饰符 返回值 包名.报名...类名.方法名(参数列表)
            例：execution(public void com.ce.service.impl.AccountServiceImpl.saveAccount())
            访问修饰符可以省略
            返回值可以使用通配符，表示任意返回值
            包名可以使用通配符，但是有几级包，就需要写几个*
            包名可以使用..表示当前包及其子包
            类名和方法名都可以使用通配符
            参数列表：
                可以直接写数据类型：
                    基本类型直接写名称：  int
                    引用类型写包名.类名的方式 java.lang.String
                可以使用通配符表示任意类型，但是必须有参数
                可以使用..表示有无参数均可
            全通配写法：
                execution（* *..*.*(..))
            实际开发中切入点表达式的通常写法：
                切到业务实现类下的所有方法
                   execution(* com,ce.service.impl.*.*(..)）

    -->
    <!--配置Logger类-->
    <bean id="logger" class="com.ce.utils.Logger"/>

    <!--配置AOP-->
    <aop:config>
        <!--配置切入点表达式 id属性用于指定表达式的唯一标识。expression用于指定表达式内容-->
        <aop:pointcut id="pt1" expression="bean(accountService)"/>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入带你方法的关联-->
            <!--配置环绕通知-->
            <aop:around method="arroundPintLog" pointcut-ref="pt1"/>

            <!--前置通知：在切入点方法执行之前执行
            <aop:before method="beforePrintLog" pointcut-ref="pt1"/>-->
            <!--后置通知：在切入点方法正常执行之后执行，它和异常通知只能执行一个
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"/>-->
            <!--异常通知：在切入点方法执行产生异常之后执行，它和后置通知只能执行一个
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>-->
            <!--最终通知，无论切入点方法是否正常执行它都会在其后面执行。
            <aop:after method="afterPintLog" pointcut-ref="pt1"/>-->
        </aop:aspect>
    </aop:config>
</beans>