<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="accountDao" class="dao.impl.AccountDaoImpl"/>
    <!-- spring的依赖注入
        依赖注入：Dependency Injection
        IOC的作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给spring来维护
        在当前类需要用到其他类的对象，由spring来为我们提供，我们只需在配置文件中说明。
        依赖关系的维护：称为依赖注入。
        依赖注入：
            能注入的数据：有三类
                基本类型和String
                其他bean类型（在配置文件中或注解配置过的bean）
                复杂类型/集合类型
            注入的方式：三种
                第一种：使用构造函数提供
                第二种：使用set方法提供
                第三种：使用注解提供
        -->

    <!-- 构造函数注入
        使用的标签：constructor-arg
        标签出现的位置：bean标签
        标签中的属性：
            type：用于指定要注入的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置从0开始。
            name：用于指定给构造函数中指定名称的参数赋值
            =====================以上三个用于指定给构造器中哪个参数赋值===============
            value：用于提供基本类型和String类型的数据
            ref：用于指定那个其他的bean类型数据。指spring的Ioc核心容器中出现过的bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
        缺点：
            改变了bean对象的实例化方式，是我们在创建对象时，如果用不到这些数据，也必须提供
     -->
    <bean id="accountService" class="service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="张三"/>
        <constructor-arg name="age" value="20"/>
        <constructor-arg name="birthday" ref="now"/>
    </bean>
    <!-- 配置一个日期对象 -->
    <bean id="now" class="java.util.Date"/>


    <!-- set方法注入  更常用
        涉及的标签：property
        出现的位置：bean标签的内部
        标签中的属性：
            name：用于指定注入时所调用的set方法名称
            value：用于提供基本类型和String类型的数据
            ref：用于指定那个其他的bean类型数据。指spring的Ioc核心容器中出现过的bean对象
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果有某个成员必须有值，则可能忘记赋值
     -->
    <bean id="accountService2" class="service.impl.AccountServiceImpl2">
        <property name="name" value="张三"/>
        <property name="age" value="21"/>
    </bean>


    <!-- 复杂类型/集合类型的注入 -->
    <bean id="accountService3" class="service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array value-type="java.lang.String">
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="list">
            <list value-type="java.lang.String">
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        <property name="mySet">
            <set value-type="java.lang.String">
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="key1" value="AAA"/>
                <entry key="key2" value="BBB"/>
                <entry key="key3" value="CCC"/>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="key1">AAA</prop>
                <prop key="key2">BBB</prop>
                <prop key="key3">CCC</prop>
            </props>
        </property>
    </bean>
</beans>